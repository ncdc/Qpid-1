#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

import optparse
from qpid.messaging import *
from qpid.util import URL

parser = optparse.OptionParser(usage="usage: %prog [options] ADDRESS ...",
                               description="Drain messages from the supplied address.")
parser.add_option("-b", "--broker", default="localhost",
                  help="connect to specified BROKER (default %default)")
parser.add_option("-t", "--timeout", type=float, default=0,
                  help="timeout in seconds to wait before exiting (default %default)")
parser.add_option("-f", "--forever", action="store_true",
                  help="ignore timeout and wait forever")

opts, args = parser.parse_args()

url = URL(opts.broker)
if args:
  addr = args.pop(0)
else:
  parser.error("address is required")
if opts.forever:
  timeout = None
else:
  timeout = opts.timeout

# XXX: should make URL default the port for us
conn = Connection.open(url.host, url.port or AMQP_PORT,
                       username=url.user, password=url.password)
ssn = conn.session()
rcv = ssn.receiver(addr)

while True:
  try:
    print rcv.fetch(timeout=timeout)
    ssn.acknowledge()
  except Empty:
    break
  except ReceiveError, e:
    print e
    break

conn.close()
