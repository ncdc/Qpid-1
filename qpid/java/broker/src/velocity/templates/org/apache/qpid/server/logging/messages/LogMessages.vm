/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 *
 */
package org.apache.qpid.server.logging.messages;

import org.apache.qpid.server.logging.LogMessage;        
import org.apache.qpid.server.registry.ApplicationRegistry;        

import java.text.MessageFormat;
import java.util.Locale;
import java.util.ResourceBundle;

/**
 * Generated Using GeneratedLogMessages and LogMessages.vm
 *
 * This file is based on the content of LogMessages.properties
 *
 * It is generated so that we can provide compile time validation of the
 * message parameters
 */
public class ${type.name}Messages
{
    static ResourceBundle _messages;
    static MessageFormat _formatter;

    static
    {
        Locale currentLocale = ApplicationRegistry.getInstance().getConfiguration().getLocale();

        _messages = ResourceBundle.getBundle("org.apache.qpid.server.logging.messages.LogMessages",
                                                           currentLocale);

        _formatter = new MessageFormat("");
        _formatter.setLocale(currentLocale);
    }

#foreach( $message in ${type.list} )
    /**
     * Log a ${type.name} message of the Format:
     * <pre>${message.format}</pre> 
     */
    public static LogMessage ${message.methodName}(#foreach($parameter in ${message.parameters})${parameter.type} ${parameter.name}#if (${velocityCount} != ${message.parameters.size()} ),#end
#end)
    {
        final Object[] messageArguments = {#foreach($parameter in ${message.parameters})${parameter.name}#if (${velocityCount} != ${message.parameters.size()} ),#end#end};

        _formatter.applyPattern(_messages.getString("${message.name}"));
        return new LogMessage()
        {
            public String toString()
            {
                return "${message.name} : " + _formatter.format(messageArguments);
            }
        };

    }
             
#end

}
